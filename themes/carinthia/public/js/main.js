(() => {
  // <stdin>
  console.log("This site was generated by Hugo.");
  (function() {
    const THEME_KEY = "theme-preference";
    const themes = ["system", "light", "dark"];
    function getThemePreference() {
      const stored = localStorage.getItem(THEME_KEY);
      if (stored && themes.includes(stored)) {
        return stored;
      }
      return "system";
    }
    function setThemePreference(theme) {
      localStorage.setItem(THEME_KEY, theme);
    }
    function applyTheme(theme) {
      document.documentElement.setAttribute("data-theme", theme);
      applySyntaxTheme(theme);
      if (theme === "system") {
        const systemIcon = document.querySelector(".theme-icon-system");
        if (systemIcon) {
          const prefersDark = window.matchMedia(
            "(prefers-color-scheme: dark)"
          ).matches;
          const sunElement = systemIcon.querySelector(".system-sun");
          const moonElement = systemIcon.querySelector(".system-moon");
          if (sunElement && moonElement) {
            if (prefersDark) {
              sunElement.style.display = "none";
              moonElement.style.display = "block";
            } else {
              sunElement.style.display = "block";
              moonElement.style.display = "none";
            }
          }
        }
      }
    }
    function applySyntaxTheme(theme) {
      const lightSyntax = document.getElementById("syntax-light");
      const darkSyntax = document.getElementById("syntax-dark");
      if (!lightSyntax || !darkSyntax) return;
      let isDark = false;
      if (theme === "system") {
        isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      } else {
        isDark = theme === "dark";
      }
      if (isDark) {
        lightSyntax.disabled = true;
        darkSyntax.disabled = false;
      } else {
        lightSyntax.disabled = false;
        darkSyntax.disabled = true;
      }
    }
    function cycleTheme() {
      const current = getThemePreference();
      const currentIndex = themes.indexOf(current);
      const nextIndex = (currentIndex + 1) % themes.length;
      const nextTheme = themes[nextIndex];
      setThemePreference(nextTheme);
      applyTheme(nextTheme);
    }
    document.addEventListener("DOMContentLoaded", function() {
      const theme = getThemePreference();
      applyTheme(theme);
      const switcher = document.getElementById("theme-switcher");
      if (switcher) {
        switcher.addEventListener("click", cycleTheme);
      }
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      mediaQuery.addEventListener("change", function() {
        const currentTheme = getThemePreference();
        if (currentTheme === "system") {
          applyTheme("system");
        }
      });
    });
    if (document.readyState !== "loading") {
      const theme = getThemePreference();
      applyTheme(theme);
    }
  })();
  (function() {
    function addCopyButtons() {
      const codeBlocks = document.querySelectorAll("pre");
      codeBlocks.forEach(function(codeBlock) {
        if (codeBlock.querySelector(".code-copy-btn")) return;
        let wrapper = codeBlock.parentElement;
        if (!wrapper.classList.contains("code-block-wrapper")) {
          wrapper = document.createElement("div");
          wrapper.className = "code-block-wrapper";
          codeBlock.parentNode.insertBefore(wrapper, codeBlock);
          wrapper.appendChild(codeBlock);
        }
        const copyBtn = document.createElement("button");
        copyBtn.className = "code-copy-btn";
        copyBtn.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
        </svg>
      `;
        copyBtn.setAttribute("aria-label", "Copy code to clipboard");
        copyBtn.setAttribute("title", "Copy to clipboard");
        copyBtn.addEventListener("click", function() {
          const code = codeBlock.querySelector("code") || codeBlock;
          const text = code.textContent;
          if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(text).then(function() {
              showCopySuccess(copyBtn);
            }).catch(function() {
              fallbackCopy(text, copyBtn);
            });
          } else {
            fallbackCopy(text, copyBtn);
          }
        });
        wrapper.appendChild(copyBtn);
      });
    }
    function fallbackCopy(text, button) {
      const textArea = document.createElement("textarea");
      textArea.value = text;
      textArea.style.position = "fixed";
      textArea.style.left = "-999999px";
      textArea.style.top = "-999999px";
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      try {
        document.execCommand("copy");
        showCopySuccess(button);
      } catch (err) {
        console.error("Failed to copy code: ", err);
        showCopyError(button);
      }
      document.body.removeChild(textArea);
    }
    function showCopySuccess(button) {
      button.innerHTML = `
      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
      </svg>
    `;
      button.classList.add("copied");
      setTimeout(function() {
        button.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 16H5V5h2v3h10V5h2v14z"/>
        </svg>
      `;
        button.classList.remove("copied");
      }, 2e3);
    }
    function showCopyError(button) {
      button.innerHTML = `
      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
    `;
      setTimeout(function() {
        button.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 16H5V5h2v3h10V5h2v14z"/>
      </svg>
    `;
      }, 2e3);
    }
    document.addEventListener("DOMContentLoaded", addCopyButtons);
    if (document.readyState !== "loading") {
      addCopyButtons();
    }
  })();
  (function() {
    function initializeImages() {
      const contentImages = document.querySelectorAll(
        "main img, .content img, article img"
      );
      contentImages.forEach(function(img) {
        if (img.closest(".image-container")) return;
        if (img.classList.contains("no-enhance") || img.classList.contains("inline-image"))
          return;
        enhanceImage(img);
      });
    }
    function enhanceImage(img) {
      const src = img.src;
      const alt = img.alt || "";
      const title = img.title || "";
      const isFullSize = img.dataset.fullSize === "true" || img.classList.contains("full-size");
      const caption = img.dataset.caption || img.title || "";
      const container = document.createElement("div");
      container.className = "image-container";
      const wrapper = document.createElement("div");
      wrapper.className = isFullSize ? "image-wrapper full-size" : "image-wrapper collapsed";
      const newImg = document.createElement("img");
      newImg.src = src;
      newImg.alt = alt;
      if (title) newImg.title = title;
      if (!isFullSize) {
        const expandBtn = document.createElement("button");
        expandBtn.className = "expand-button";
        expandBtn.setAttribute("aria-label", "Toggle image size");
        expandBtn.innerHTML = `
        <svg class="expand-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M7,14H5v5h5v-2H7V14z M12,10V7l-4,4l4,4v-3h4v-2H12z M19,9h-2v3h3V9H19z M17,14v3h-3v2h5v-5H17z"/>
        </svg>
      `;
        expandBtn.addEventListener("click", function(e) {
          e.preventDefault();
          e.stopPropagation();
          toggleImageSize(wrapper);
        });
        wrapper.appendChild(expandBtn);
      }
      if (!isFullSize) {
        wrapper.addEventListener("click", function(e) {
          if (e.target.closest(".expand-button")) return;
          toggleImageSize(wrapper);
        });
      }
      wrapper.appendChild(newImg);
      container.appendChild(wrapper);
      if (caption) {
        const captionElement = document.createElement("div");
        captionElement.className = "image-caption";
        captionElement.textContent = caption;
        container.appendChild(captionElement);
      }
      img.parentNode.insertBefore(container, img);
      img.remove();
      newImg.addEventListener("load", function() {
        wrapper.classList.remove("loading");
        checkExpansionViability(wrapper, newImg);
      });
      if (!newImg.complete) {
        wrapper.classList.add("loading");
      } else {
        checkExpansionViability(wrapper, newImg);
      }
    }
    function checkExpansionViability(wrapper, img) {
      if (wrapper.classList.contains("full-size")) return;
      const viewportWidth = window.innerWidth;
      const preferredWidth = viewportWidth * 0.6 + 100;
      const collapsedMaxWidth = Math.min(Math.max(280, preferredWidth), 600);
      const naturalWidth = img.naturalWidth;
      const naturalHeight = img.naturalHeight;
      if (naturalWidth <= collapsedMaxWidth) {
        wrapper.classList.add("no-expansion");
        wrapper.style.cursor = "default";
        const expandBtn = wrapper.querySelector(".expand-button");
        if (expandBtn) {
          expandBtn.remove();
        }
        const newWrapper = wrapper.cloneNode(true);
        wrapper.parentNode.replaceChild(newWrapper, wrapper);
      }
    }
    function toggleImageSize(wrapper) {
      const isExpanded = wrapper.classList.contains("expanded");
      if (isExpanded) {
        wrapper.classList.remove("expanded");
        wrapper.classList.add("collapsed");
      } else {
        wrapper.classList.remove("collapsed");
        wrapper.classList.add("expanded");
      }
      const expandBtn = wrapper.querySelector(".expand-button");
      if (expandBtn) {
        const newLabel = isExpanded ? "Expand image" : "Collapse image";
        expandBtn.setAttribute("aria-label", newLabel);
      }
    }
    function handleResize() {
      const imageWrappers = document.querySelectorAll(".image-wrapper");
      imageWrappers.forEach(function(wrapper) {
        const img = wrapper.querySelector("img");
        if (img) {
          img.style.maxWidth = "";
          if (!wrapper.classList.contains("full-size") && img.complete) {
            wrapper.classList.remove("no-expansion");
            wrapper.style.cursor = "";
            checkExpansionViability(wrapper, img);
          }
        }
      });
    }
    document.addEventListener("DOMContentLoaded", initializeImages);
    if (document.readyState !== "loading") {
      initializeImages();
    }
    let resizeTimeout;
    window.addEventListener("resize", function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(handleResize, 150);
    });
    function reinitializeImages() {
      initializeImages();
    }
    window.enhanceImages = reinitializeImages;
  })();
})();
